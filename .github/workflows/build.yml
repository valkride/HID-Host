name: Build HID Host Executable

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install hidapi
        pip install psutil
        pip install GPUtil
        pip install pycaw
        pip install comtypes
        pip install pywin32
        
    - name: Find hidapi DLL and test
      run: |
        python -c "
        import hid
        import os
        import glob
        import site
        
        print('=== HIDAPI DLL DETECTION ===')
        print('HID module location:', hid.__file__)
        hid_dir = os.path.dirname(hid.__file__)
        
        # Look for DLLs in multiple locations
        search_dirs = [hid_dir]
        search_dirs.extend(site.getsitepackages())
        
        found_dlls = []
        for search_dir in search_dirs:
            if os.path.exists(search_dir):
                dll_files = glob.glob(os.path.join(search_dir, '**', '*.dll'), recursive=True)
                hidapi_dlls = [dll for dll in dll_files if 'hidapi' in dll.lower()]
                found_dlls.extend(hidapi_dlls)
        
        print('Found hidapi DLLs:', found_dlls)
        
        # Test basic functionality
        try:
            devices = hid.enumerate()
            print('✓ HID enumerate works, found', len(devices), 'devices')
        except Exception as e:
            print('✗ HID enumerate failed:', e)
        "
        
    - name: Build executable with aggressive DLL collection
      working-directory: HID-Host
      run: |
        pyinstaller --onefile --console --add-data "hid-config.json;." --collect-all hid --collect-binaries hid --copy-metadata hid --copy-metadata hidapi --hidden-import hid --hidden-import ctypes --hidden-import ctypes.wintypes --name hid-host hid-host.pyw
        
    - name: Upload executable
      uses: actions/upload-artifact@v3
      with:
        name: hid-host-windows
        path: HID-Host/dist/hid-host.exe
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: HID-Host/dist/hid-host.exe
        asset_name: hid-host.exe
        asset_content_type: application/octet-stream
