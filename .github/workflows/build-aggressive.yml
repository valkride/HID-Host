name: Build HID Host with DLL Inclusion

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install hidapi
        pip install psutil
        
    - name: Install optional dependencies
      continue-on-error: true
      run: |
        pip install GPUtil
        pip install pycaw
        pip install comtypes
        pip install pywin32
        
    - name: Locate hidapi DLLs
      id: find-dlls
      run: |
        python -c "
        import hid
        import os
        import glob
        import site
        
        print('=== SEARCHING FOR HIDAPI DLLS ===')
        hid_file = hid.__file__
        print(f'HID module: {hid_file}')
        
        # Search locations
        search_locations = []
        
        # 1. Same directory as hid module
        hid_dir = os.path.dirname(hid_file)
        search_locations.append(hid_dir)
        
        # 2. Site packages
        for site_dir in site.getsitepackages():
            search_locations.append(site_dir)
            search_locations.append(os.path.join(site_dir, 'hid'))
        
        # 3. Check if .pyd file has embedded DLL functionality
        if hid_file.endswith('.pyd'):
            print(f'Found .pyd file (compiled extension): {hid_file}')
        
        # Search for actual DLL files
        all_dlls = []
        for location in search_locations:
            if os.path.exists(location):
                print(f'Searching in: {location}')
                # Look for hidapi DLLs
                patterns = ['*hidapi*.dll', '*libhidapi*.dll', 'hidapi.dll']
                for pattern in patterns:
                    dlls = glob.glob(os.path.join(location, '**', pattern), recursive=True)
                    for dll in dlls:
                        if os.path.isfile(dll):
                            print(f'  Found DLL: {dll}')
                            all_dlls.append(dll)
        
        print(f'Total DLLs found: {len(all_dlls)}')
        for dll in all_dlls:
            print(f'  - {dll}')
        
        # Test if hidapi works
        try:
            devices = hid.enumerate()
            print(f'✓ HID works: found {len(devices)} devices')
        except Exception as e:
            print(f'✗ HID failed: {e}')
        "
          - name: Find and manually include hidapi DLL
      id: find-dll
      run: |
        python -c "
        import hid
        import os
        import glob
        import site
        import shutil
        
        print('=== MANUAL DLL SEARCH AND COPY ===')
        
        # Get all possible locations
        search_dirs = []
        search_dirs.append(os.path.dirname(hid.__file__))
        search_dirs.extend(site.getsitepackages())
        
        # Also check Python installation directory
        import sys
        search_dirs.append(os.path.dirname(sys.executable))
        search_dirs.append(os.path.join(os.path.dirname(sys.executable), 'DLLs'))
        search_dirs.append(os.path.join(os.path.dirname(sys.executable), 'Library', 'bin'))
        
        found_dlls = []
        for search_dir in search_dirs:
            if os.path.exists(search_dir):
                print(f'Searching: {search_dir}')
                # Look recursively for hidapi DLLs
                for root, dirs, files in os.walk(search_dir):
                    for file in files:
                        if file.lower().endswith('.dll') and 'hidapi' in file.lower():
                            dll_path = os.path.join(root, file)
                            print(f'  Found: {dll_path}')
                            found_dlls.append(dll_path)
        
        # Also look for any DLL that might contain hidapi
        print('\\nSearching for any DLL that might contain hidapi...')
        import subprocess
        try:
            # Use where command to find hidapi.dll in PATH
            result = subprocess.run(['where', 'hidapi.dll'], capture_output=True, text=True)
            if result.returncode == 0:
                for line in result.stdout.strip().split('\\n'):
                    if line.strip():
                        print(f'  Found in PATH: {line.strip()}')
                        found_dlls.append(line.strip())
        except:
            pass
        
        # Remove duplicates
        found_dlls = list(set(found_dlls))
        
        print(f'\\nTotal unique DLLs found: {len(found_dlls)}')
        for dll in found_dlls:
            print(f'  - {dll}')
        
        # Copy DLLs to HID-Host directory for explicit inclusion
        if found_dlls:
            os.makedirs('HID-Host/dlls', exist_ok=True)
            dll_list = []
            for dll in found_dlls:
                if os.path.exists(dll):
                    dll_name = os.path.basename(dll)
                    dest = f'HID-Host/dlls/{dll_name}'
                    shutil.copy2(dll, dest)
                    print(f'Copied {dll} -> {dest}')
                    dll_list.append(f'dlls/{dll_name}')
            
            # Write the DLL list for the build step
            with open('dll_list.txt', 'w') as f:
                for dll in dll_list:
                    f.write(f'--add-binary \"{dll};.\" ')
            print(f'\\nWrote build arguments to dll_list.txt')
        else:
            print('No DLLs found - will try alternative approach')
            with open('dll_list.txt', 'w') as f:
                f.write('')
        "
        
    - name: Build with manually found DLLs
      working-directory: HID-Host
      run: |
        echo "=== BUILDING WITH MANUAL DLL INCLUSION ==="
        
        # Read the DLL arguments
        $dll_args = ""
        if (Test-Path "../dll_list.txt") {
          $dll_args = Get-Content "../dll_list.txt" -Raw
          echo "DLL arguments: $dll_args"
        }
        
        # Build with explicit DLL inclusion
        $cmd = "pyinstaller --onefile --console --add-data `"hid-config.json;.`" --collect-all hid $dll_args --name hid-host-manual hid-host.pyw"
        echo "Build command: $cmd"
        Invoke-Expression $cmd
        
    - name: Alternative build with different hidapi
      working-directory: HID-Host
      continue-on-error: true
      run: |
        echo "=== TRYING ALTERNATIVE HIDAPI PACKAGE ==="
        pip uninstall hidapi -y
        pip install hid
        pyinstaller --onefile --console --add-data "hid-config.json;." --collect-all hid --name hid-host-alt hid-host.pyw
        
    - name: List build contents
      working-directory: HID-Host
      run: |
        echo "=== BUILD CONTENTS ==="
        if (Test-Path "dist") { 
          echo "dist directory contents:"
          Get-ChildItem dist -Recurse | Format-Table Name,Length,LastWriteTime
        }
        if (Test-Path "build") {
          echo "build directory exists"
        }
        
    - name: Test executable
      working-directory: HID-Host
      continue-on-error: true
      run: |
        if (Test-Path "dist/hid-host-max.exe") {
          echo "Testing executable..."
          echo "File size: $((Get-Item 'dist/hid-host-max.exe').Length) bytes"
          # Try to run it briefly
          Start-Process -FilePath "dist/hid-host-max.exe" -ArgumentList "--help" -Wait -NoNewWindow -RedirectStandardOutput "test_output.txt" -RedirectStandardError "test_error.txt"
          echo "=== STDOUT ==="
          if (Test-Path "test_output.txt") { Get-Content "test_output.txt" }
          echo "=== STDERR ==="  
          if (Test-Path "test_error.txt") { Get-Content "test_error.txt" }
        }
        
    - name: Upload executable
      uses: actions/upload-artifact@v3
      with:
        name: hid-host-with-dlls
        path: HID-Host/dist/hid-host-max.exe
